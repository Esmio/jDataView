{"name":"jDataView","tagline":"DataView. Extended. Anywhere.","body":"jDataView provides convenient way to read and/or modify binary data in all the browsers. It follows the [DataView Specification](http://www.khronos.org/registry/webgl/doc/spec/TypedArray-spec.html#8) and even extends it for a more practical use.\r\n\r\nExplanation\r\n===========\r\n\r\nThere are three ways to read a binary file from the browser.\r\n\r\n* The first one is to download the file through XHR with [charset=x-user-defined](https://developer.mozilla.org/en/using_xmlhttprequest#Receiving_binary_data). You get the file as a **String**, convert it to byte **Array** and you have to rewrite all the decoding and encoding functions (getUint16, getFloat32, ...). All the browsers support this.\r\n\r\n* Then browsers that implemented **Canvas** also added **CanvasPixelArray** as part of **ImageData**. It is fast byte array that is created and used internally by `<canvas />` element for manipulating low-level image data. We can create such host element and use it as factory for our own instances of this array.\r\n\r\n* Then browsers that implemented **WebGL** added **ArrayBuffer**. It is a plain buffer that can be read with views called **TypedArrays** (Int32Array, Float64Array, ...). You can use them to decode the file but this is not very handy. It has big drawback, it can't read non-aligned data (but we can actually hack that). So they replaced **CanvasPixelArray** with **Uint8ClampedArray** (same as Uint8Array, but cuts off numbers outside 0..255 range).\r\n\r\n* A new revision of the specification added **DataViews**. It is a view around your buffer that can read/write arbitrary data types directly through functions: getUint32, getFloat64 ...\r\n\r\nAnd one way to read a binary file from the server.\r\n\r\n* **NodeJS Buffers**. They appeared in [Node 0.4.0](http://nodejs.org/docs/v0.4.0/api/buffers.html). [Node 0.5.0](http://nodejs.org/docs/v0.5.0/api/buffers.html) added a DataView-like API. And [Node 0.6.0](http://nodejs.org/docs/v0.6.0/api/buffers.html) changed the API naming convention.\r\n\r\n**jDataView** provides the **DataView API** with own convenient extensions using the best available option between Arrays, TypedArrays, NodeJS Buffers and DataViews.\r\n\r\nDocumentation\r\n=============\r\n\r\n  * API\r\n    * [jDataView constructor](https://github.com/jDataView/jDataView/wiki/jDataView-constructor)\r\n    * [DataView Specification](http://www.khronos.org/registry/typedarray/specs/latest/#8)\r\n    * Extended Specification\r\n      * [Operation control](https://github.com/jDataView/jDataView/wiki/Operation-control)\r\n      * [writeXXX methods](https://github.com/jDataView/jDataView/wiki/writeXXX-methods)\r\n      * [Strings and Blobs](https://github.com/jDataView/jDataView/wiki/Strings-and-Blobs)\r\n      * [64-bit integers](https://github.com/jDataView/jDataView/wiki/64-bit-integers)\r\n      * [Bitfields](https://github.com/jDataView/jDataView/wiki/Bitfields)\r\n      * [Internal utilities](https://github.com/jDataView/jDataView/wiki/Internal-utilities)\r\n  * [Example](https://github.com/jDataView/jDataView/wiki/Example)\r\n  * [Changelog](https://github.com/jDataView/jDataView/blob/master/CHANGELOG.md)\r\n\r\nAdvanced usage ([jBinary](https://github.com/jDataView/jBinary))\r\n========================\r\n\r\nFor complicated binary structures, it may be hard enough to use only low-level get/set operations for parsing,\r\nprocessing and writing data.\r\n\r\nIn addition, most likely you might need convenient I/O methods for retrieving data from external sources such like\r\nlocal files (using File API or from Node.js), remote files (via HTTP(S)), data-URIs, Node.js streams etc. as well\r\nas for displaying generated content to user on webpage in image/video/audio/... containers\r\nor even as simple download link.\r\n\r\nIf you faced any of these problems, you might want to check out new [jBinary](https://github.com/jDataView/jBinary)\r\nlibrary that works on top of **jDataView** and allows to operate with binary data in structured and convenient way.\r\n\r\nDemos\r\n=====\r\n\r\n* A [simple tar viewer](http://jdataview.github.io/jDataView/untar/). It is a \"Hello World\" demo of how easy it is to use the library.\r\n\r\n* [BMP viewer](http://rreverser.com/dev/bmp/) with ability to load files by URL or using File API, parsing them using library and rendering with Canvas (no `<img />` elements at all).\r\n\r\n* JavaScript [TrueTypeFont library demo](http://ynakajima.github.io/ttf.js/demo/glyflist/) which uses jDataView to read and display glyphs from TrueType file.\r\n\r\n* [jBinary.Repo](https://jdataview.github.io/jBinary.Repo) ready-to-use typesets and corresponding demos of using\r\n[jDataView](https://github.com/jDataView/jDataView)+[jBinary](https://github.com/jDataView/jBinary)\r\nfor reading popular file formats like\r\n[GZIP archives](https://jdataview.github.io/jBinary.Repo/demo/#gzip),\r\n[TAR archives](https://jdataview.github.io/jBinary.Repo/demo/#tar),\r\n[ICO images](https://jdataview.github.io/jBinary.Repo/demo/#ico),\r\n[MP3 tags](https://jdataview.github.io/jBinary.Repo/demo/#mp3)\r\netc.\r\n\r\n* [Talking image](http://hacksparrow.github.io/talking-image/) - animation and audio in one package powered by\r\nHTML5 Audio, [jDataView](https://github.com/jDataView/jDataView) and [jBinary](https://github.com/jDataView/jBinary).\r\n\r\n* A [PhotoSynth WebGL Viewer](http://www.visual-experiments.com/2011/04/05/photosynth-webgl-viewer/) by Visual Experiments. It uses jDataView to read the binary file and then WebGL to display it.\r\n[![Screenshot](http://i.imgur.com/HRHXo.jpg)](http://www.visual-experiments.com/2011/04/05/photosynth-webgl-viewer/)\r\n\r\nPlease tell us if you made something with jDataView :)\r\n\r\nLicense\r\n=======\r\n\r\njDataView is issued under [Do What The Fuck You Want To Public License](http://sam.zoy.org/wtfpl/) :)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}